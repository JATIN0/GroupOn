/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientside;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;


/**
 *
 * @author iLLuMiNati
 */
public class ChatFrame extends javax.swing.JFrame {

    /**
     * Creates new form ChatFrame
     */
    private String recieveName;
    private String selfName;
    private String singleOrGrp;
    
    //for server purposes
    private String index; //at which session is stores at server
    private String id; // at which user is stored in session
    
    
    //values of chatServer
    private String serverIP;
    private int serverPort;
    
    private DataExchangeClient dec; 
    private Thread recvThread;
    public ChatFrame(String uName,String rName, String sOrG) 
    {
        this.selfName = uName;
        this.recieveName = rName;
        this.singleOrGrp = sOrG;
        
        //making connection to the server
        serverIP = "localhost";
        serverPort = 3487;
        dec = new DataExchangeClient(serverIP,serverPort);
        dec.send(new String [] {sOrG,rName,uName});
        
        String chat;
        if(sOrG.equals("S"))
            chat = "Single Chat";
        else
            chat ="Group Chat";
        initComponents();
        
        //Setting the heading of the chat frame..
        userLabel.setText(rName+"(" + chat + ")");
        sendField.requestFocus();
        recvThread = new Thread(new ClientRecieveThread(dec));
        
    }
    
    public void startRecvThread()
    {
        recvThread.start();
    }
    
    
    

    //class which handles recieving messages for client
    //this will be resposible for reading data from the stream
    class ClientRecieveThread implements Runnable
    {
        DataExchangeClient dec;

        public ClientRecieveThread(DataExchangeClient dec)
        {
            this.dec = dec;
        }

        @Override
        public void run()
        {
            String sign = dec.getData();
            if(sign.equals("<>?")) //message from server for index
            {
                index = dec.getData();
                id = dec.getData();
            }
            sign = dec.getData();
            if(sign.equals("><??")) //for loading previous messages
            {
                while(true)
                {
                    System.out.println("inside");
                    Message msg = (Message)dec.getObject();
                    if(msg.getDateTime().equals("<>/")) //for end of the message stream
                         break;
                    getMsg(msg); //to update the stream
                } 
            }
            while(true)
            {
                Message msg = (Message)dec.getObject();
                getMsg(msg);
            }
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatPanel = new javax.swing.JPanel();
        headPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userPanel = new javax.swing.JPanel();
        userLabel = new javax.swing.JLabel();
        msgScrollPane = new javax.swing.JScrollPane();
        msgPane = new javax.swing.JTextPane();
        sendField = new javax.swing.JTextField();
        sendBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        chatPanel.setBackground(new java.awt.Color(175, 200, 217));

        headPanel.setBackground(new java.awt.Color(240, 88, 79));

        jLabel1.setFont(new java.awt.Font("Rockney", 0, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Group On");

        javax.swing.GroupLayout headPanelLayout = new javax.swing.GroupLayout(headPanel);
        headPanel.setLayout(headPanelLayout);
        headPanelLayout.setHorizontalGroup(
            headPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        headPanelLayout.setVerticalGroup(
            headPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        userPanel.setBackground(new java.awt.Color(229, 237, 167));

        userLabel.setFont(new java.awt.Font("Humanst521 BT", 0, 24)); // NOI18N
        userLabel.setText("Other/Group Name");

        javax.swing.GroupLayout userPanelLayout = new javax.swing.GroupLayout(userPanel);
        userPanel.setLayout(userPanelLayout);
        userPanelLayout.setHorizontalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        userPanelLayout.setVerticalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        msgPane.setEditable(false);
        msgPane.setFont(new java.awt.Font("Humanst521 BT", 0, 18)); // NOI18N
        msgScrollPane.setViewportView(msgPane);

        sendField.setFont(new java.awt.Font("Calibri", 0, 22)); // NOI18N
        sendField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sendFieldKeyTyped(evt);
            }
        });

        sendBtn.setFont(new java.awt.Font("Rockney", 0, 30)); // NOI18N
        sendBtn.setText("Send");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chatPanelLayout = new javax.swing.GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addComponent(headPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(userPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(msgScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(chatPanelLayout.createSequentialGroup()
                        .addComponent(sendField, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        chatPanelLayout.setVerticalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addGroup(chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(headPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(msgScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
            sendMsg();
    }//GEN-LAST:event_sendBtnActionPerformed

    private void sendFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sendFieldKeyTyped
        if(evt.getKeyChar() == '\n')
        {
            sendMsg();
        }
    }//GEN-LAST:event_sendFieldKeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dec.sendObject(new Message(0,index,id,"-1","",0));
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing
    
    private void sendMsg()
    {
        String  msgs = msgPane.getText();


        //Getting Date Time.....
        LocalDateTime dt = LocalDateTime.now();
        String sqlPattern = "yyyy-MM-dd HH:mm:ss";
        String currSqlTime = dt.format(DateTimeFormatter.ofPattern(sqlPattern));

        String chatPattern = "dd-MM-yyyy HH:mm:ss";
        String currChatTime = dt.format(DateTimeFormatter.ofPattern(chatPattern));

        msgs = msgs  + currChatTime + "   " + selfName + ": " + sendField.getText() + "\n";
        Message sendMsg = new Message(0,selfName,recieveName,currSqlTime,sendField.getText(),1);
        dec.sendObject(sendMsg);
        sendField.setText("");
       // dec.send(new String []{sendField.getText()});
        sendField.requestFocus();
        msgPane.setText(msgs);
    }
    
    private void getMsg(Message msg)
    {
        
        String  msgs = msgPane.getText();
        String dateTime = msg.getDateTime();
        System.out.println("DateTime is " + dateTime);

        LocalDateTime dt= LocalDateTime.parse(dateTime,DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        String chatPattern = "dd-MM-yyyy HH:mm:ss";
        String currChatTime = dt.format(DateTimeFormatter.ofPattern(chatPattern));
        msgs = msgs + currChatTime + "   " + msg.getSUName() + ": " + msg.getContent() + "\n";
        msgPane.setText(msgs);
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ChatFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chatPanel;
    private javax.swing.JPanel headPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextPane msgPane;
    private javax.swing.JScrollPane msgScrollPane;
    private javax.swing.JButton sendBtn;
    private javax.swing.JTextField sendField;
    private javax.swing.JLabel userLabel;
    private javax.swing.JPanel userPanel;
    // End of variables declaration//GEN-END:variables
}
